@page "/counter"
@using System.Net.Http.Json;
@using System.Net.Http;
@using System.Net.Http.Headers;
@inject IHttpClientFactory factory;
@inject TokenModel tokeninfo;


<PageTitle>Todo List</PageTitle>

<h1>Todo List</h1>
@if (string.IsNullOrEmpty(errorMessage) == false)
{
    <div class="h3 text-danger">@errorMessage</div>
}

<button class="btn btn-primary" @onclick="FetchTodos">Get Todo List</button>


@if (todos is not null)
{
    @foreach (var t in todos)
    {
        if (t.IsComplete)
        {
            <div class="h2">@t.Task (Completed)</div>
        }
        else if (t.IsComplete == false)
        {
            <div class="h2">
                @t.Task
                <button class="btn-sm btn-primary"
                        @onclick="()=> CompleteTodo(t)">
                    Complete
                </button>
            </div>
            
        }

        <div class="h2">
            <button class="btn-sm btn-info"
                    @onclick="()=> Deletetodo(t)">
                Delete
            </button>
        </div>
    }
}

@code {
    private List<TodoModel>? todos;
    private HttpClient? client;
    private string errorMessage;

    private async void FetchTodos()
    {
        client = factory.CreateClient("api");
        client.DefaultRequestHeaders.Authorization =
        new AuthenticationHeaderValue("Bearer", tokeninfo.Token);
        try
        {
            todos = await client.GetFromJsonAsync<List<TodoModel>>("Todos");
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        await InvokeAsync(StateHasChanged);
    }

    private async void CompleteTodo(TodoModel todo)
    {
        await client!.PutAsJsonAsync<string>($"Todos/{todo.Id}/Complete", "");
        todo.IsComplete = true;
        await InvokeAsync(StateHasChanged);
    }


    private async void Deletetodo(TodoModel todo)
    {
        var request = new HttpRequestMessage(HttpMethod.Delete, $"Todos/{todo.Id}");
        var response = await client!.SendAsync(request);
        response.EnsureSuccessStatusCode();
        Console.WriteLine(await response.Content.ReadAsStringAsync());
        FetchTodos();
        await InvokeAsync(StateHasChanged);
    }

}
